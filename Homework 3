from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import os

def generate_key(password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(password.encode())
    return key

def encrypt_data(key, plaintext):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(plaintext.encode()) + encryptor.finalize()
    return iv + ciphertext

def decrypt_data(key, ciphertext):
    iv = ciphertext[:16]
    ciphertext = ciphertext[16:]
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    return plaintext.decode()

# Step 1: Generate and save AES256 key
password = "your_secure_password"
salt = os.urandom(16)
key = generate_key(password, salt)

# Step 2: Create a string to test encryption
original_string = "Hello, this is a test string!"

# Step 3: Perform AES256 symmetric encryption
cipher_text = encrypt_data(key, original_string)

# Step 4: Use AES256 symmetric decryption
decrypted_text = decrypt_data(key, cipher_text)

# Step 5: Use `assert` to check if decrypted data is the same as the original string
assert decrypted_text == original_string

print("Encryption and decryption successful.")
